package at.game.server.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Timer;
import java.util.TimerTask;

import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;

import at.game.server.network.Server;
import at.game.server.network.ServerResponseListener;

public class ServerSettings extends JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 0L;
	private JLabel serverStatusTxt;
	private JLabel serverStatus;
	private JLabel serverResponse;
	private JButton startStopServer;
	private Server server;

	public ServerSettings() {
		initComponents();
		setDefaultCloseOperation(EXIT_ON_CLOSE);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {
		serverStatusTxt = new JLabel("server status:");
		serverStatus = new JLabel();
		serverResponse = new JLabel();
		startStopServer = new JButton("start");

		startStopServer.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				if ((server==null) ? false : server.isRunning()) {
					server.stopServer();
					startStopServer.setText("start");
				} else {
					server = new Server();
					server.start();
					startStopServer.setText("stop");
					server.addServerResponseListener(new ServerResponseListener() {
						
						@Override
						public void handleResponse(String serverResponse) {
							ServerSettings.this.serverResponse.setText(serverResponse);
						}
					});
				}
			}
		});

		GroupLayout layout = new GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setAutoCreateGaps(true);
		layout.setAutoCreateContainerGaps(true);

		layout.setHorizontalGroup(layout.createSequentialGroup()
				.addComponent(startStopServer).addComponent(serverStatusTxt)
				.addComponent(serverStatus).addComponent(serverResponse));
		layout.setVerticalGroup(layout.createParallelGroup()
				.addComponent(startStopServer).addComponent(serverStatusTxt)
				.addComponent(serverStatus).addComponent(serverResponse));

		pack();

		TimerTask task = new TimerTask() {

			@Override
			public void run() {
				if (server == null)
					serverStatus.setText("Stopped");
				else
					serverStatus.setText(server.isRunning() ? "Running"
							: "Stopped");
			}
		};

		Timer timer = new Timer();
		timer.schedule(task, 100, 100);
	}
}
