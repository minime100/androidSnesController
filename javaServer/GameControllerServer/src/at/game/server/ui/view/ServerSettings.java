package at.game.server.ui.view;

import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Timer;
import java.util.TimerTask;

import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;

import at.game.server.network.Server;
import at.game.server.network.ServerResponseListener;
import at.game.server.ui.model.ModelDataChangedListener;
import at.game.server.ui.model.ServerSettingsModel;

/**
 * the main page of the server configuration
 */
public class ServerSettings extends JFrame {
	private static final long serialVersionUID = 0L;
	private JLabel serverStatusTxt;
	private JLabel serverStatus;
	private JLabel serverResponse;
	private JButton startStopServer;
	private Server server;
	private ServerSettingsModel model = new ServerSettingsModel();

	public ServerSettings() {
		model.setClientMessage("");
		model.setLblServerStatus("server status:");
		model.setPort(50101);
		model.setTxtServerStatus("stopped");
		model.setTxtStartStopButton("start");
		model.addModelDataChangedListener(new ModelDataChangedListener() {
			@Override
			public void dataChanged() {
				ServerSettings.this.updateContent();
			}
		});

		initComponents();
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setSize(200, 200);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {
		serverStatusTxt = new JLabel();
		serverStatus = new JLabel();
		serverResponse = new JLabel();

		setupStartStopServerButton();
		setupLayout();
		updateIsRunningText();
	}

	private void setupStartStopServerButton() {
		startStopServer = new JButton(model.getTxtStartStopButton());

		startStopServer.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				if ((server == null) ? false : server.isRunning()) {
					server.stopServer();
					model.setTxtStartStopButton("start");
				} else {
					server = new Server(50101);
					server.start();
					model.setTxtStartStopButton("stop");
					server.addServerResponseListener(new ServerResponseListener() {
						@Override
						public void handleResponse(String serverResponse) {
							ServerSettings.this.serverResponse
									.setText(serverResponse);
						}
					});
				}
				model.dataHasBeenUpdated();
			}
		});
	}

	private void setupLayout() {
		GroupLayout layout = new GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setAutoCreateGaps(true);
		layout.setAutoCreateContainerGaps(true);

		layout.setHorizontalGroup(layout.createSequentialGroup()
				.addComponent(startStopServer).addComponent(serverStatusTxt)
				.addComponent(serverStatus).addComponent(serverResponse));
		layout.setVerticalGroup(layout.createParallelGroup()
				.addComponent(startStopServer).addComponent(serverStatusTxt)
				.addComponent(serverStatus).addComponent(serverResponse));

		pack();
	}

	private void updateIsRunningText() {
		TimerTask task = new TimerTask() {
			@Override
			public void run() {
				if (server == null)
					model.setTxtServerStatus("Stopped");
				else
					model.setTxtServerStatus(server.isRunning() ? "Running"
							: "Stopped");
				model.dataHasBeenUpdated();
			}
		};

		Timer timer = new Timer();
		timer.schedule(task, 100, 100);
	}

	private void updateContent() {
		startStopServer.setText(model.getTxtStartStopButton());
		serverStatusTxt.setText(model.getLblServerStatus());
		serverStatus.setText(model.getTxtServerStatus());
	}
}
